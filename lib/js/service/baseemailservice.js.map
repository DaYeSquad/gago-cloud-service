{"version":3,"sources":["../src/service/baseemailservice.ts"],"names":[],"mappings":"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","file":"baseemailservice.js","sourcesContent":["// Copyright 2016 Frank Lin (lin.xiaoe.f@gmail.com). All rights reserved.\n// Use of this source code is governed a license that can be found in the LICENSE file.\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as Showdown from 'showdown';\n\nconst DirectMailService = require('node-aliyun-dms');\n\nimport {Aliyun} from './aliyun';\n\n\n/**\n * Sending single or batch emails from aliyun.\n */\nexport class BaseEmailService {\n\n  /**\n   * Sends HTML email and returns request id.\n   */\n  static async sendHtmlEmail(toAddress: string, fromAlias: string, subject: string, htmlBody: string): Promise<string> {\n    return new Promise<string>((resolve, reject) => {\n      let dms: any = new DirectMailService({\n        'accessid': Aliyun.ACCESS_ID,\n        'accesskey': Aliyun.ACCESS_SECRET\n      });\n      dms.sendSingleMail('gago@gagodata.cn', true, 0, toAddress, fromAlias, subject,\n        BaseEmailService.escapeInvalidChars_(htmlBody), undefined, (error: any, res: any) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(res['RequestId']);\n        }\n      });\n    });\n  }\n\n  /**\n   * Sends change log to addresses.\n   * @param toAddresses Address list.\n   * @param fromAlias From alias.\n   * @param subject Subject of email.\n   * @param changelogPath Full path including file name.\n   * @param tmpFilePath Full path including file name of version file path.\n   * @returns {Promise<void>}\n   */\n  static async sendChangelog(toAddresses: string[], fromAlias: string, subject: string, changelogPath: string,\n                       tmpFilePath: string): Promise<string> {\n    // 将当前 package.json 中的 version 写入指定的临时文件\n    let lastVersion: string | undefined = undefined;\n\n    const versionFilePath: string = tmpFilePath;\n    if (fs.existsSync(versionFilePath)) {\n      lastVersion = fs.readFileSync(versionFilePath, 'utf8');\n    }\n\n    const packageJson: any = require(path.resolve('./package.json'));\n    const currentVersion: string = String(packageJson.version);\n\n    if (currentVersion === lastVersion) { // 如果版本与上一个部署的版本一致则不发送邮件\n      return;\n    }\n\n    fs.writeFileSync(versionFilePath, packageJson.version, 'utf8');\n\n    // 发送 CHANGELOG.md\n    const converter: Showdown.Converter = new Showdown.Converter();\n    let dataSourceMdContent: string = fs.readFileSync(changelogPath, 'utf8');\n\n    dataSourceMdContent = dataSourceMdContent.replace(/\\(/g, '（');\n    dataSourceMdContent = dataSourceMdContent.replace(/\\)/g, '）');\n\n    const dataSourceMarkdownHtml: string = converter.makeHtml(dataSourceMdContent);\n\n    const toAddress: string = toAddresses.join(',');\n\n    const htmlBody: string = `<html>\n        <p><strong>此邮件为机器生成，请勿回复</strong></p>\n        ${dataSourceMarkdownHtml}\n       </html>`;\n\n    return await BaseEmailService.sendHtmlEmail(toAddress, fromAlias, subject, htmlBody);\n  }\n\n  /**\n   * Aliyun does not allow to use brackets in content.\n   * @param content Email content.\n   * @returns {string} Escaped content.\n   * @private\n   */\n  static escapeInvalidChars_(content: string): string {\n    // escape brackets\n    let escapedContent: string = content.replace(/\\(/g, '（');\n    escapedContent = escapedContent.replace(/\\)/g, '）');\n    return escapedContent;\n  }\n}\n"]}